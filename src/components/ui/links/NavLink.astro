---
// Destructure the properties from Astro.props
const { url, name } = Astro.props;

// Define TypeScript interface for the properties
interface Props {
  url: string;
  name: string;
}

// Function to check if URL is external
const isExternalUrl = (url: string): boolean => {
  return url.startsWith('http://') || url.startsWith('https://');
};

// Only create an ID for internal links
const linkId = isExternalUrl(url)
  ? undefined
  : url === '/'
    ? 'home'
    : url.replace('/', '');

// Determine if we need target and rel attributes for external links
const externalAttributes = isExternalUrl(url)
  ? { target: '_blank', rel: 'noopener noreferrer' }
  : {};
---

<!--
Re-usable link component for navigation bar. 
- Highlights active internal links by comparing current URL with href
- Opens external links in new tab
- Adds appropriate security attributes for external links
-->
<a
  id={linkId}
  href={url}
  {...externalAttributes}
  data-astro-prefetch={!isExternalUrl(url)}
  class="rounded-lg text-base font-medium text-neutral-600 outline-none ring-zinc-500 hover:text-neutral-500 focus-visible:ring dark:text-neutral-400 dark:ring-zinc-200 dark:hover:text-neutral-500 dark:focus:outline-none md:py-3 md:text-sm 2xl:text-base"
>
  {name}
</a>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const url = window.location.pathname;
    const navId = url === '/' ? 'home' : url.replace('/', '');
    const nav = document.getElementById(navId);

    if (nav) {
      nav.classList.remove(
        'text-neutral-600',
        'dark:text-neutral-400',
        'hover:text-neutral-500',
        'dark:hover:text-neutral-500'
      );
      nav.classList.add('text-fuchsia-400', 'dark:text-fuchsia-300');
      nav.setAttribute('aria-current', 'page');
    }
  });
</script>
